Collection-->

        Declaration of array:- array is of object type.
        
     int arr[]= new int[5];                       int arr[]=new int[]{10,20,30,40}
         arr[0]=10;     | 
         arr[1]=20;    size

   

.code for array-->

ex.1->Declaration of array
class ArrayDemo{
  public static void main(String[] args){

      int arr[] =new int[5];
 
         arr[0]=10; 
         arr[1]=20; 
         arr[2]=30; 
         arr[3]=40; 
         arr[4]=50; 

      for(int i=0 ; i<arr.length;i++){
     
            System.out.println(arr[i]);
   }
  }
}
o/p-10
20
30
40
50


ex.2->Declaration of array another type
class ArrayDemo{
  public static void main(String[] args){

      int arr[] =new int[]{10,20,30,40,50};

      for(int i=0 ; i<arr.length;i++){
     
            System.out.println(arr[i]);
   }
  }
}
o/p-10
20
30
40
50



ex.3->Array should be of same datatype

class ArrayDemo{
  public static void main(String[] args){

      int arr[] =new int[5];
 
         arr[0]=10; 
         arr[1]=20; 
         arr[2]=30.5; 
         arr[3]=40; 
         arr[4]=50; 

      for(int i=0 ; i<arr.length;i++){
     
            System.out.println(arr[i]);
   }
  }
}
o/p-error(Loosy convertion)


ex4->predefined class array 


class StringArrayDemo{

  public static void main(String[] args){
   
   String s1= new String("Amazon");
   String s2= new String("Google");
   String s3= new String("Apple");
   String s4= new String("Microsoft");
   String s5= new String("Tesla");
 
   String strArr[] =new String[]{s1,s2,s3,s4,s5};
 
  for(int i=0;i<strArr.length;i++){

    System.out.println(strArr[i]);

     }
   }
}

o/p-
Amazon
Google
Apple
Microsoft
Tesla


ex.5->Array with two predifned array


class StringArrayDemo{

  public static void main(String[] args){
   
   String s1= new String("Amazon");
   String s2= new String("Google");
   StringBuffer s3= new StringBuffer("Apple");
   String s4= new String("Microsoft");
   String s5= new String("Tesla");
 
   String strArr[] =new String[]{s1,s2,s3,s4,s5};
 
  for(int i=0;i<strArr.length;i++){

    System.out.println(strArr[i]);

     }
   }
}

o/p-
error


ex.6->Array with two predifned array and Object class object

class StringArrayDemo{

  public static void main(String[] args){
   
   String s1= new String("Amazon");
   String s2= new String("Google");
  StringBuffer s3= new StringBuffer("Apple");
   String s4= new String("Microsoft");
   String s5= new String("Tesla");
 
   Object strArr[] =new Object[]{s1,s2,s3,s4,s5};//parent of String and StringBuffer
 
  for(int i=0;i<strArr.length;i++){

    System.out.println(strArr[i]);

     }
   }
}

o/p-
Amazon
Google
Apple
Microsoft
Tesla


ex.7->UserDefined class

class StateCapital{
  String state;
  String capital;
    StateCapital(String state,String capital){
  thisstate=state;
  this.capital=capital;
 }
}

class UsserObjectArray{
  public static void main(String[] args){
  
     StateCapital obj1= new StateCapital("Maha","Mumbai");
     StateCapital obj2= new StateCapital("Goa","panji");
     StateCapital obj3= new StateCapital("Bihar","Patna");
     StateCapital obj4= new StateCapital("Jharkhand","Ranchi");

  StateCapital sc[]=new StateCapital[]{obj1,obj2,obj3,obj4};

   for(int i=0;i< StateCapital.length;i++){
   // System.out.println(sc[i]);//gives address
      System.out.print(sc[i].state);
      System.out.println(":" +sc[i].capital);
   }

  }
}
o/p-Maha:Mumbai
    Goa:panji
   Bihar:Patna
   Jharkhand:Ranchi


********************************************************************************************************************************************************************************************
collection is the set of different object on which we can perform different operations
-collection can be homogeneous or hetrogeneous
-size of collection is growable and shrinkable
-collection have rich method set 

9 Interfaces of collection-->

                                                   collection Interface 
                    |---------------------------------------------------------------------------|                                         Map Interface
                    |                                    |                                      |                                       /      |
                  List Interface                    set Interface                            queue Interface                   Hashmap class   | 
                    |                                     |                                                                                    |
                    |-LinkedList class             Soertedset Interface                                                                 SortedMap Interface
                    |-ArrayList class                      |                                                                                    |
                    |-Vector class                Navigableset Interface                                                                Navigativemap Interface
                    |-stack class




********************************************************************************************************************************************************************************************


javap java.util.Collection

javap.java.util.List

javap java.util.Queue

javap java.util.Map


********************************************************************************************************************************************************************************************
.to represent similar type of data is array.
.to represent different types of data is collection. 
.to traverse in collection java use cursor.

#Cursor in collection -->

Cursor is used to fetch the value


ex.1-->example to add different elements (but compile time it is unsafe)
 imort java.util.ArrayList;   
class CursorDemo{
  public static void main(String[] args){
  
    ArrayList al = new ArrayList();
        al.add("Sihagad"); 
       al.add("JSPM"); 
      al.add("Zeal"); 
       al.add(1000); 
      System.out.println(al); 
 }
}
o/p-unsafe operation(at compile time)
[Sihagad ,JSPM,Zeal,1000](at runtime)



ex.2-->example to add different elements with different datatypes to do it safe at compile time
imort java.util.ArrayList;   
class CursorDemo{
  public static void main(String[] args){
  
    ArrayList<String> al = new ArrayList<String>();
        al.add("Sihagad"); 
       al.add("JSPM"); 
      al.add("Zeal"); 
      al.add(1000);
      System.out.println(al); 
 }
}
o/p-no suitable method found for add



ex.3-->example to add different elements (but compile time it is safe)
imort java.util.ArrayList;   
class CursorDemo{
  public static void main(String[] args){
  
    ArrayList<String> al = new ArrayList<String>();
        al.add("Sihagad"); 
       al.add("JSPM"); 
      al.add("Zeal"); 
      System.out.println(al); 
 }
}
o/p-[Sihagad ,JSPM,Zeal]



ex.4-->Adding elements using vector

import java.util.*;
class CursorDemo{
  public static void main(String[] args){
   Vector v= new Vector();
    v.addElement(10);
   v.addElement(20);
  v.addElement(30);
  v.addElement(40);
  v.addElement(50);

  System.out.println(v);
 }
}
o/p-[10,20,30,40,50]

.but to compare to elements or to iterate perticular elements we need cursor



***************************************************************************************************************************************************************************************


4 Types of cursor-->

1.Enumeration(1.0 version)
2.Iterator  (1.2 version)
3.ListIterator (1.2 version)
4.SplitIterator(1.8 version)


1. Enumeration -->

                                         Enumeration (Interface)  \
                                              |-hasMoreElement     \        on legacy class
   javap java.util.Enumeration                |                   ----->     |
                                              |-nextElement        /         |-vector class
                                                                  /          |-stack class




2.Iterator -->

   javap java.util.Enumeration          Iterator (Interface)
                                               |-hasNext()
                                               |- next()
                                               |-remove()
                                               |-forEachRemaining()





3.ListIterator -->

   javap java.util.Enumeration          ListIterator (Interface) extends Iterator
                                               |-hasNext()
                                               |- next()
                                               |-remove()
                                               |-hasPrevious()
                                               |-previous()
                                               |-nextIndex()
                                               |-previousIndex()
                                               |-set(E)
                                               |-add(E)


*******************************************************************************************************************************************************************************************

ex.1)example of vector with Enumeration cursor

imort java.util.*;
class EnumCursor{
 
    public static void main(String[] args){
      
     Vector v= new Vector();
       v.addElement(10);
      v.addElement(20);
     v.addElement(30);
     v.addElement(40);
    v.addElement(50);

      (elements method of vector class have return type of Enumeration)
     /
   Enumeration e = v.elements();    // for enumCursor
             
            (return boolean value if element is present return true)
             /
  while(e.hasMoreElements()){

     System.out.println(e.nextElement());-->(return object of the element)
  }
 }
}
o/p-10
  20
  30
  40
  50




ex.2)operation on the vector class with enumeration cursor

imort java.uti.*;
class EnumCursor{
 
    public static void main(String[] args){
      
     Vector v= new Vector();
       v.addElement(10);
      v.addElement(20);
     v.addElement(30);
     v.addElement(40);
    v.addElement(50);

      (elements method of vector class have return type of Enumeration)
     /
   Enumeration e = v.elements();    // for enumCursor
             
            (return boolean value if element is present return true)
             /
  while(e.hasMoreElements()){
         
   Integer val=(Integer)e.nextElement();
    if(val % 4 == 0)
       System.out.println(val);
  }  
 }
}
o/p- 20
     40

 



ex.2)Remove operation on the vector class with iterator cursor

imort java.uti.*;
class IteratorCursor{
 
    public static void main(String[] args){
      
     Vector v= new Vector();
       v.addElement(10);
      v.addElement(20);
     v.addElement(30);
     v.addElement(40);
    v.addElement(50);

   Iterator e = v.iterator();    // for IteratorCursor
             
            (return boolean value if element is present return true)
             /
  while(e.hasNext()){
         
   Integer val=(Integer)e.next();
    if(val % 4 == 0)
      e.remove();
  }
   System.out.println(v);  
 }
}
o/p-[10,30,50]

 

******************************************************************************************************************************************************************************************


#Diiference between Enumeration and Iterator Interface

 
                 Enumeration                   |          Iterator
----------------------------------------------------------------------------------------------
         1) on legacy class (vector,stack)     |   all collection classes(universal)

         2) elements()                         |   iterator()
    
         3) 2 methods                          |   3 methods




*************************************************************************************************************************************************************************************
ex.1-> Example of vector class with ListIterator cursor


imort java.uti.*;
class ListIteratorCursor{
 
    public static void main(String[] args){
      
     Vector v= new Vector();
       v.addElement(10);
      v.addElement(20);
     v.addElement(30);
     v.addElement(40);
    v.addElement(50);

 ListIterator e = v.listIterator();    // for IteratorCursor
             
            (return boolean value if element is present return true)
             /
  while(e.hasNext()){
 System.out.println(e.next());  
         
  }
 while(e.hasPrevious()){
 System.out.println(e.previous());  
         
  }
 }
}
o/p-10
20
30
40
50
50
40
30
20
10





ex.2->set operation on vector class with ListIterator cursor

imort java.uti.*;
class ListIteratorCursor{
    public static void main(String[] args){
      
     Vector v= new Vector();
       v.addElement(10);
      v.addElement(20);
     v.addElement(30);
     v.addElement(40);
    v.addElement(50);

 ListIterator e = v.listIterator();    // for IteratorCursor
             
            (return boolean value if element is present return true)
             /
  while(e.hasNext()){

   Integer I=(Integer)e.next();
         if(I == 30){
            e.set(60);
    }     
  }
 while(e.hasPrevious()){
 System.out.println(e.previous());  
       
  }
 }
}
o/p-50
40
60
20
10


****************************************************************************************************************************************************************************************

Collection Interface -->

  
.collection interface extends Iterable
.all methods are public abstract



List Interface -->

.list Interface extends collection
.It has all the abstract method of collection and also their own public abstract method 




#example of arraylist-->

 import java.util.*;
class ArrayListDemo{
  public static void main(String[] args){
      
    ArrayList al = new ArrayList();
    al.add("Shashi");
    al.add("Ashish");
    al.add("Rahul");
    al.add("Kanha");
    al.add("Badhe");
 System.out.println(al);

ArrayList al2 = new ArrayList();
    al2.add("Madhur");
    al2.addAll(al);
 System .out.println(al2);     

 }
}
o/p-[Shashi,Ashish,Rahul,Kanha,Badhe]
   [Madhur,Shashi,Ashish,Rahul,Kanha,Badhe]



#example of arraylist to pass object as an argument--->

class ITCompany{
   String cname=null;
  int empCnt=0;

    ITCompany(String cname,int empCnt){
      this.cname=cname;
      this.empCnt =empCnt;
 }
  void info(){
  System.out.println("Company Name =" +cname + " "+"EmpCnt=" +Cnt);
 }
}

import java.util.*;
class ArrayListDemo{
 public static void main(String[] args){
   ArrayList al=new ArrayList();
   al.add(new ITCompany("Biencaps",25));
   al.add(new ITCompany("Bitwise",250));
   al.add(new ITCompany("Apple",5000));
   al.add(new ITCompany("Microsoft",7000));
   
   System.out.println(al);//It will print address
   
   ListIterator litr = al.listIterator();

     while(litr.hasNext()){
      ITCompany obj =(ITCompany)litr.next();
      obj.info();
  }
 }
}


**********************************************************************************************************************************************************************************
*
                                        Collection
                                           |
                                        List Interface
                                            |
                                       ArrayList class



ex.1- example of arraylist with capacity method
import java.util.*;
class ArrayListConstructor{
   pubic static void main(String[] args){

    ArrayList al1= new ArrayList();
    System.out.println(al1.capacity());//error(bcz capacity method is not available in Arraylist)default capacity is 10 in ArrayList
   System.out.println(al1.size());//0 bcz their is not an element available in Arraylist
 }
}
o/p-0


ex.2-Example of arraylist with predefined capacity constructor
import java.util.*;
class ArrayListConstructor{
   pubic static void main(String[] args){

    ArrayList al1= new ArrayList(500);
   System.out.println(al1.size());//0 bcz their is not an element available in Arraylist
 }
}
o/p-0



ex.3-Example of arraylist constructor in which object pass in constructor
import java.util.*;
class ArrayListConstructor{
   pubic static void main(String[] args){

    ArrayList al1= new ArrayList();
    al1.add(10);
    al1.add(10);
    al1.add(10);
    al1.add(10);
    al1.add(10);
    al1.add(10);
   System.out.println(al1);

 ArrayList al2 =new ArrayList(al1);
  al2.add(20);
  al2.add(20);
  System.out.println(al2);
 }
}
o/p-[10,10,10,10,10,10]
    [10,10,10,10,10,10,20,20]



*******************************************************************************************************************************************************************************


#ArrayList Method-->


import java.util.*;
class ArrayListMethods {
  public static void main(String[] args){
      ArrayList al= new ArrayList();
         al.add("Amazon");
         al.add("Microsoft");
         al.add("Apple");
         al.add("Flipkard");
         al.add("Amazon");
   System.out.println(al);

//Method 1--> add(index,object)
     al.add(2,"oracle");
   System.out.println(al);

//Method 2-->indexOf(object)
  System.out.println( al.indexOf("Amazon"));//it will give first index of the amazon
 System.out.println( al.indexOf("Nupur"));//-1 bcz object of Nupur is not available 

//Method 3-->lastIndexOf(object)
  System.out.println( al.lastIndexOf("Amazon"));//it will give last index of the amazon 

//Method 4-->size()
  System.out.println(al.size());

//Method 5-->remove(int/object)
    al.remove(3);
  System.out.println(al);


//Method 6-->remove(int/object)
    al.remove(Amazon); //remove first amazon
  System.out.println(al);

//Method 7-->clone()
 ArrayList al2 =(ArrayList)al.clone();//copy arraylist al in al2
System.out.println(al2);

//Method 8-->clear()
al.clear();
System.out.println(al);
System.out.println(al2);
 }
}
o/p-[Amazon,Microsoft,Apple,Flipkard,Amazon]        
[Amazon,Microsoft,oracle,Apple,Flipkard,Amazon] 
0
-1
5
6
[Amazon,Microsoft,oracle,Flipkard,Amazon] 
[Microsoft,oracle,Flipkard,Amazon] 
[Microsoft,oracle,Flipkard,Amazon] 
[]
[Microsoft,oracle,Flipkard,Amazon] 

Note--> javap java.util.ArrayList; -->this will show all the methods of ArrayList


***********************************************************************************************************************************************************************************

*                                       Collection
                                           |
                                        List Interface
                                            |
                                       Linked List class

#example of linkList-->

import java.util.*;
class BigBazaar{
  String prodName =null;
 float price =0.0f;

 BigBazar(String prodName,float price){
  this.prodName=proName;
 this.price =price;
 }
void disp(){
 System.out.print("Product :"+prodName);
 System.out.print("Price :"+price);
 }
}
class LinkedListConstr{
 public static void main(String[] args){
   
  LinkedList ll= new LinkedList();
  ll.add(new BigBazaar("Gahoo",45.50f));
  ll.add(new BigBazaar("Tandool",50.00f));
  ll.add(new BigBazaar("Bajari",60.50f));
  ll.add(new BigBazaar("Jwari",55.50f));
 System.out.println(ll);

Iterator itr =ll.iterator();
while(itr.hasNext()){
   
  BigBazaar obj=(BigBazzar)itr.next();
  obj.disp();
  }
 }
}
o/p-[vsqtsq89,hgdsuhd8,bcsh4dj,bwsdud7]  
Product :Gahoo Price :45.50
Product :Tandool Price :50.00
Product :Bajari Price :60.50
Product :Jwari Price :55.50


****************************************************************************************************************************************************************************************
#Methods of LinkList-->

import java.util.*;
class LinkedListMethods{
  public static void main(String[] args){
      LinkedList ll=new LinkedList();
             ll.add("c");
             ll.add("cpp");  
             ll.add("java");
             ll.add("Python");
             ll.add("Flutter"); 
             ll.add("java");
  
   pSystem.out.println(ll); 

  //add(index,object)
  ll.add(4,"Networking");
  System.out.println(ll); 

 //addFirst()
  ll.addFirst("React");
  System.out.println(ll); 

 //addLast()
  ll.addLast("Angular");
  System.out.println(ll); 

 //removeFirst()
    ll.removeFirst();
  System.out.println(ll);

 //indexOf(object)
 System.out.println( ll.indexOf("java"));
  
 //set(index,object)
  ll.set(6,"Android")
 System.out.println(ll);

  }
}
o/p-[c,cpp,java,python,Flutter,java]
   [c,cpp,java,python,Networking,Flutter,java]
  [React,c,cpp,java,python,Networking,Flutter,java]
  [React,c,cpp,java,python,Networking,Flutter,java,Angular]
  [c,cpp,java,python,Networking,Flutter,java,Angular]
  2
 [c,cpp,java,python,Networking,Flutter,Android,Angular]



***************************************************************************************************************************************************************************************



























































